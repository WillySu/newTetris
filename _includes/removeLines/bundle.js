!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===b&&R()}(e,n),t&&t(e,n)};var n,o=!0,r="482af5483a3edde33569",i=1e4,s={},a=[],c=[];function d(e){var t=M[e];if(!t)return L;var o=function(o){return t.hot.active?(M[o]?-1===M[o].parents.indexOf(e)&&M[o].parents.push(e):(a=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),a=[]),L(o)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return L[e]},set:function(t){L[e]=t}}};for(var i in L)Object.prototype.hasOwnProperty.call(L,i)&&"e"!==i&&Object.defineProperty(o,i,r(i));return o.e=function(e){return"ready"===u&&p("prepare"),b++,L.e(e).then(t,function(e){throw t(),e});function t(){b--,"prepare"===u&&(y[e]||O(e),0===b&&0===v&&R())}},o}var l=[],u="idle";function p(e){u=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,m,v=0,b=0,y={},g={},x={};function w(e){return+e+""===e?+e:e}function C(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return o=e,p("check"),(t=i,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,i=L.p+""+r+".hot-update.json";o.open("GET",i,!0),o.timeout=t,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===o.status)e();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(o.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;g={},y={},x=e.c,m=e.h,p("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return O(0),"prepare"===u&&0===b&&0===v&&R(),t});var t}function O(e){x[e]?(g[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=L.p+""+e+"."+r+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function R(){p("ready");var e=f;if(f=null,e)if(o)Promise.resolve().then(function(){return E(o)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function E(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var n,o,i,c,d;function l(e){for(var t=[e],n={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var r=o.pop(),i=r.id,s=r.chain;if((c=M[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<c.parents.length;a++){var d=c.parents[a],l=M[d];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[i]?(n[d]||(n[d]=[]),f(n[d],[i])):(delete n[d],t.push(d),o.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}t=t||{};var v={},b=[],y={},g=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var C in h)if(Object.prototype.hasOwnProperty.call(h,C)){var O;d=w(C);var R=!1,E=!1,I=!1,j="";switch((O=h[C]?l(d):{type:"disposed",moduleId:C}).chain&&(j="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(R=new Error("Aborted because of self decline: "+O.moduleId+j));break;case"declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(R=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+j));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(O),t.ignoreUnaccepted||(R=new Error("Aborted because "+d+" is not accepted"+j));break;case"accepted":t.onAccepted&&t.onAccepted(O),E=!0;break;case"disposed":t.onDisposed&&t.onDisposed(O),I=!0;break;default:throw new Error("Unexception type "+O.type)}if(R)return p("abort"),Promise.reject(R);if(E)for(d in y[d]=h[d],f(b,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,d)&&(v[d]||(v[d]=[]),f(v[d],O.outdatedDependencies[d]));I&&(f(b,[O.moduleId]),y[d]=g)}var T,U=[];for(o=0;o<b.length;o++)d=b[o],M[d]&&M[d].hot._selfAccepted&&U.push({module:d,errorHandler:M[d].hot._selfAccepted});p("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var D,A,S=b.slice();S.length>0;)if(d=S.pop(),c=M[d]){var _={},k=c.hot._disposeHandlers;for(i=0;i<k.length;i++)(n=k[i])(_);for(s[d]=_,c.hot.active=!1,delete M[d],delete v[d],i=0;i<c.children.length;i++){var N=M[c.children[i]];N&&((T=N.parents.indexOf(d))>=0&&N.parents.splice(T,1))}}for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(c=M[d]))for(A=v[d],i=0;i<A.length;i++)D=A[i],(T=c.children.indexOf(D))>=0&&c.children.splice(T,1);for(d in p("apply"),r=m,y)Object.prototype.hasOwnProperty.call(y,d)&&(e[d]=y[d]);var H=null;for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(c=M[d])){A=v[d];var B=[];for(o=0;o<A.length;o++)if(D=A[o],n=c.hot._acceptedDependencies[D]){if(-1!==B.indexOf(n))continue;B.push(n)}for(o=0;o<B.length;o++){n=B[o];try{n(A)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:A[o],error:e}),t.ignoreErrored||H||(H=e)}}}for(o=0;o<U.length;o++){var P=U[o];d=P.module,a=[d];try{L(d)}catch(e){if("function"==typeof P.errorHandler)try{P.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||H||(H=n),H||(H=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||H||(H=e)}}return H?(p("fail"),Promise.reject(H)):(p("idle"),new Promise(function(e){e(b)}))}var M={};function L(t){if(M[t])return M[t].exports;var o=M[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:C,apply:E,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(o.exports,o,o.exports,d(t)),o.l=!0,o.exports}L.m=e,L.c=M,L.d=function(e,t,n){L.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},L.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},L.t=function(e,t){if(1&t&&(e=L(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(L.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)L.d(n,o,function(t){return e[t]}.bind(null,o));return n},L.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return L.d(t,"a",t),t},L.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},L.p="/",L.h=function(){return r},d(4)(L.s=4)}([function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"table.grid-2d {\n  border-collapse: collapse;\n  border: 2px solid #444;\n  margin-bottom: 0; }\n  table.grid-2d td {\n    padding: 0;\n    border: 1px solid #aaa;\n    height: 24px;\n    width: 24px; }\n\nform.controlForm {\n  margin-top: 12px; }\n  form.controlForm button {\n    margin-right: 6px; }\n  form.controlForm :last-child {\n    margin-right: 0; }\n",""])},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,".main-holder {\n  display: flex; }\n",""])},function(e,t,n){var o,r,i={},s=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,d=0,l=[],u=n(6);function p(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var s=0;s<r.parts.length;s++)r.parts[s](o.parts[s]);for(;s<o.parts.length;s++)r.parts.push(y(o.parts[s],t))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(y(o.parts[s],t));i[o.id]={id:o.id,refs:1,parts:a}}}}function f(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};o[s]?o[s].parts.push(a):n.push(o[s]={id:s,parts:[a]})}return n}function h(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=l[l.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var s=d++;n=c||(c=v(t)),o=w.bind(null,n,s,!1),r=w.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=u(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var s=new Blob([o],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),r=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),o=function(e,t){var n=t.css,o=t.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){m(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return p(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var s=n[r];(a=i[s.id]).refs--,o.push(a)}e&&p(f(e,t),t);for(r=0;r<o.length;r++){var a;if(0===(a=o[r]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var g,x=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=x(t,r);else{var i=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(s=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(i).concat([r]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var s=e[r];"number"==typeof s[0]&&o[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){"use strict";n.r(t);class o{constructor({name:e,color:t}={}){this.name=e,this.color=t||"red",this.rotations=[[[1,3,1],[1,0,0]],[[1,3],[0,1],[0,1]],[[0,2,1],[1,1,1]],[[3,0],[1,0],[1,1]]],this.rotationIndex=0}get rotation(){return this.rotations[this.rotationIndex]}rotateLeft(){this.rotationIndex--,this.rotationIndex<0&&(this.rotationIndex=3)}rotateRight(){this.rotationIndex++,this.rotationIndex>3&&(this.rotationIndex=0)}}const r="left",i="right",s="bottom",a="",c=[new class extends o{constructor({name:e,color:t}={}){super({name:"I",color:"red"}),this.rotations=[[[3],[1],[1],[1]],[[1,3,1,1]],[[3],[1],[1],[1]],[[1,1,3,1]]]}},new class extends o{constructor({name:e,color:t}={}){super({name:"J",color:"magenta"}),this.rotations=[[[1,3,1],[0,0,1]],[[0,3],[0,1],[1,1]],[[1,2,0],[1,1,1]],[[3,1],[1,0],[1,0]]]}},new class extends o{constructor({name:e,color:t}={}){super({name:"L",color:"yellow"}),this.rotations=[[[1,3,1],[1,0,0]],[[1,3],[0,1],[0,1]],[[0,2,1],[1,1,1]],[[3,0],[1,0],[1,1]]]}},new class extends o{constructor({name:e,color:t}={}){super({name:"O",color:"cyan"}),this.rotations=[[[3,1],[1,1]],[[1,3],[1,1]],[[3,1],[1,1]],[[1,3],[1,1]]]}},new class extends o{constructor({name:e,color:t}={}){super({name:"S",color:"blue"}),this.rotations=[[[0,3,1],[1,1,0]],[[3,0],[1,1],[0,1]],[[0,3,1],[1,1,0]],[[3,0],[1,1],[0,1]]]}},new class extends o{constructor({name:e,color:t}={}){super({name:"T",color:"silver"}),this.rotations=[[[1,3,1],[0,1,0]],[[0,3],[1,1],[0,1]],[[0,3,0],[1,1,1]],[[3,0],[1,1],[1,0]]]}},new class extends o{constructor({name:e,color:t}={}){super({name:"Z",color:"green"}),this.rotations=[[[1,3,0],[0,1,1]],[[0,3],[1,1],[1,0]],[[1,3,0],[0,1,1]],[[0,3],[1,1],[1,0]]]}}],d=3e3;class l{constructor({numOfCol:e=10,numOfRow:t=20,defaultTetroX:n,defaultTetroY:o,uiComponent:r}={}){this.numOfCol=e,this.numOfRow=t,this.defaultTetroX=n||0,this.defaultTetroY=o||0,this.isGameOver=!1,this.intervall=1e3,this.tetro=null,this.tetroX,this.tetroY,this.timerKey=null,this.timestamp=d,this.uiComponent=r,this.uiControl=null;const i=[];for(let n=0;n<t;n++)i.push(new Array(e).fill(a));this.matrix=i,this.uiComponent&&"function"==typeof this.uiComponent.setMatrix&&this.uiComponent.setMatrix(this.matrix)}setControl(e){this.uiControl=e}resetMatrix(){this.matrix.forEach(e=>e.fill(a))}getTetroPositions(){const{tetro:e,tetroX:t,tetroY:n}=this;if(e){return this.tetro.rotation.reduce((o,r,i)=>{for(let s=0;s<r.length;s++){const a=r[s];1!==a&&3!==a||o.push({x:t+s,y:n+i,color:e.color})}return o},[])}}updateMatrix({reset:e=!1}={}){const{numOfCol:t,numOfRow:n}=this,o=this.getTetroPositions();if(o){if(o.some(e=>{const{x:o,y:r}=e;return o<0||o>t-1||r<0||r>n-1}))return!1;if(e){if(o.every(e=>this.matrix[e.y][e.x]!==a))return o.forEach(e=>this.matrix[e.y][e.x]=a),!0}else{if(o.every(e=>this.matrix[e.y][e.x]===a))return o.forEach(e=>this.matrix[e.y][e.x]=e.color),!0}}return!1}addTetro({x:e,y:t}={}){const n=c.length,o=Math.floor(Math.random()*n);return this.tetro=c[o],this.tetroX=e||this.defaultTetroX,this.tetroY=t||this.defaultTetroY,!!this.updateMatrix()&&(this.updateUiComponent(),!0)}moveTetro({direction:e}={}){if(this.updateMatrix({reset:!0})){if(e===r?this.tetroX--:e===i?this.tetroX++:e===s&&this.tetroY++,this.updateMatrix())return this.updateUiComponent(),!0;e===r?this.tetroX++:e===i?this.tetroX--:e===s&&this.tetroY--,this.updateMatrix()}return!1}moveLeft(){return this.moveTetro({direction:r})}moveRight(){return this.moveTetro({direction:i})}moveDown(){const e=this.moveTetro({direction:s});if(!e){const e=this.checkFullLines();e&&console.log("Number of Lines removed:",e)}return e}drop(){for(;this.moveDown(););}rotateTetro({direction:e}={}){if(this.updateMatrix({reset:!0})){if(e===r?this.tetro.rotateLeft():e===i&&this.tetro.rotateRight(),this.updateMatrix())return this.updateUiComponent(),!0;e===r?this.tetro.rotateRight():e===i&&this.tetro.rotateLeft(),this.updateMatrix()}return!1}rotateLeft(){return this.rotateTetro({direction:r})}rotateRight(){return this.rotateTetro({direction:i})}updateUiComponent(){this.uiComponent&&"function"==typeof this.uiComponent.update&&this.uiComponent.update()}start(){this.isGameOver&&(this.resetMatrix(),this.updateUiComponent(),this.isGameOver=!1),this.tetro||this.addTetro(),this.dropping()}stop(){cancelAnimationFrame(this.timerKey)}checkFullLines(){let e=0,t=this.numOfRow-1;for(;t>=0;){this.matrix[t].every(e=>e!==a)?(this.removeFullLine(t),e++):t--}return e}removeFullLine(e){const{numOfCol:t}=this;for(let n=e;n>0;n--)if(0===n)this.matrix[n].fill(a);else for(let e=0;e<t;e++)this.matrix[n][e]=this.matrix[n-1][e];this.updateUiComponent()}dropping(e){if(e-this.timestamp>this.intervall&&(this.timestamp=e,!this.moveDown())){if(!this.addTetro())return void this.gameOver();cancelAnimationFrame(this.timerKey)}this.timerKey=requestAnimationFrame(e=>this.dropping(e))}gameOver(){this.timestamp=d,this.isGameOver=!0,this.stop(),this.uiControl&&"function"==typeof this.uiControl.stopUI&&this.uiControl.stopUI()}}class u{constructor({numOfCol:e=10,numOfRow:t=20,parentNode:n,grid:o,matrix:r}={}){this.numOfCol=e,this.numOfRow=t,this.parentNode=n,this.table=document.createElement("table"),this.table.className="grid-2d",this.matrix=r,this.init(),this.appendToRoot()}appendToRoot(){const{parentNode:e,table:t}=this;e&&"function"==typeof e.appendChild&&t.parentNode!==e&&e.appendChild(t)}init(){const{numOfCol:e,numOfRow:t,table:n}=this,o=document.createElement("tbody");for(let n=0;n<t;n++){const t=document.createElement("tr");for(let n=0;n<e;n++){const e=document.createElement("td");t.appendChild(e)}o.appendChild(t)}n.appendChild(o)}setMatrix(e){this.matrix=e}update(){const e=this.matrix;for(let t=0;t<e.length;t++)for(let n=0;n<e[t].length;n++){const o=e[t][n]||"transparent";this.table.rows[t].cells[n].style.backgroundColor=o}}}class p{constructor({onMoveLeft:e,onMoveRight:t,onRotateLeft:n,onRotateRight:o,onStart:r,onStop:i,onDrop:s,parentNode:a}={}){this.onStart=r,this.onStop=i,this.onDrop=s,this.onMoveLeft=e,this.onMoveRight=t,this.onRotateLeft=n,this.onRotateRight=o,this.parentNode=a,this.render()}createButton({label:e,name:t,onClick:n,disabled:o}){const r=document.createElement("button");return r.setAttribute("name",t),r.setAttribute("type","button"),r.innerText=e,"function"==typeof n&&r.addEventListener("click",n),o&&r.setAttribute("disabled",!0),r}loopButtons({name:e,disabled:t}){const n=document.controlForm.elements;for(let o=0,r=n.length;o<r;o++){const r=n[o];r.name===e?t?r.setAttribute("disabled",!0):r.removeAttribute("disabled"):t?r.removeAttribute("disabled"):r.setAttribute("disabled",!0)}}startUI(){this.loopButtons({name:"start",disabled:!0})}stopUI(){this.loopButtons({name:"start",disabled:!1})}render(){const e=document.createElement("form");e.name="controlForm",e.className="controlForm";const t=this.createButton({label:"Rotate Left",name:"rotateLeft",onClick:this.onRotateLeft,disabled:!0}),n=this.createButton({label:"Rotate Right",name:"rotateRight",onClick:this.onRotateRight,disabled:!0}),o=this.createButton({label:"Move Left",name:"moveLeft",onClick:this.onMoveLeft,disabled:!0}),r=this.createButton({label:"Move Right",name:"moveRight",onClick:this.onMoveRight,disabled:!0}),i=this.createButton({label:"Start",name:"start",onClick:(()=>{this.onStart(),this.startUI()}).bind(this)}),s=this.createButton({label:"Stop",name:"stop",onClick:(()=>{this.onStop(),this.stopUI()}).bind(this),disabled:!0}),a=this.createButton({label:"Drop Tetro",name:"dropTetro",onClick:this.onDrop,disabled:!0}),c=document.createElement("div");c.appendChild(i),c.appendChild(s);const d=document.createElement("div");d.appendChild(t),d.appendChild(n);const l=document.createElement("div");l.appendChild(o),l.appendChild(a),l.appendChild(r),e.appendChild(c),e.appendChild(d),e.appendChild(l),this.parentNode.appendChild(e)}}n(7),n(5);window.addEventListener("DOMContentLoaded",function(){const e=document.getElementById("root"),t=new u({numOfCol:10,numOfRow:20,parentNode:e});!function({grid:e,parentNode:t}){const n=new p({onMoveLeft:()=>e.moveLeft(),onMoveRight:()=>e.moveRight(),onRotateLeft:()=>e.rotateLeft(),onRotateRight:()=>e.rotateRight(),onStart:()=>e.start(),onStop:()=>e.stop(),onDrop:()=>{e.drop(),e.addTetro()},parentNode:t});e.setControl(n)}({grid:new l({numOfCol:10,numOfRow:20,defaultTetroX:3,defaultTetroY:0,uiComponent:t}),parentNode:e})})},function(e,t,n){var o=n(0);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0},i=n(2)(o,r);o.locals&&(e.exports=o.locals),e.hot.accept(0,function(t){!function(){var t=n(0);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,o=0;for(n in e){if(!t||e[n]!==t[n])return!1;o++}for(n in t)o--;return 0===o}(o.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,t,n){var o=n(1);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0},i=n(2)(o,r);o.locals&&(e.exports=o.locals),e.hot.accept(1,function(t){!function(){var t=n(1);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,o=0;for(n in e){if(!t||e[n]!==t[n])return!1;o++}for(n in t)o--;return 0===o}(o.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,