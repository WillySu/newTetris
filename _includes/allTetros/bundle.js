!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===y&&R()}(e,n),t&&t(e,n)};var n,o=!0,r="d241c6b091f25cd307d5",i=1e4,a={},s=[],c=[];function d(e){var t=E[e];if(!t)return D;var o=function(o){return t.hot.active?(E[o]?-1===E[o].parents.indexOf(e)&&E[o].parents.push(e):(s=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),s=[]),D(o)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var i in D)Object.prototype.hasOwnProperty.call(D,i)&&"e"!==i&&Object.defineProperty(o,i,r(i));return o.e=function(e){return"ready"===u&&f("prepare"),y++,D.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===u&&(b[e]||C(e),0===y&&0===v&&R())}},o}var l=[],u="idle";function f(e){u=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var p,h,m,v=0,y=0,b={},g={},w={};function x(e){return+e+""===e?+e:e}function O(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return o=e,f("check"),(t=i,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,i=D.p+""+r+".hot-update.json";o.open("GET",i,!0),o.timeout=t,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===o.status)e();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(o.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return f("idle"),null;g={},b={},w=e.c,m=e.h,f("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return C(0),"prepare"===u&&0===y&&0===v&&R(),t});var t}function C(e){w[e]?(g[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=D.p+""+e+"."+r+".hot-update.js",t.appendChild(n)}(e)):b[e]=!0}function R(){f("ready");var e=p;if(p=null,e)if(o)Promise.resolve().then(function(){return M(o)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function M(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var n,o,i,c,d;function l(e){for(var t=[e],n={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var r=o.pop(),i=r.id,a=r.chain;if((c=E[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var s=0;s<c.parents.length;s++){var d=c.parents[s],l=E[d];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[i]?(n[d]||(n[d]=[]),p(n[d],[i])):(delete n[d],t.push(d),o.push({chain:a.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}t=t||{};var v={},y=[],b={},g=function(){console.warn("[HMR] unexpected require("+C.moduleId+") to disposed module")};for(var O in h)if(Object.prototype.hasOwnProperty.call(h,O)){var C;d=x(O);var R=!1,M=!1,j=!1,L="";switch((C=h[O]?l(d):{type:"disposed",moduleId:O}).chain&&(L="\nUpdate propagation: "+C.chain.join(" -> ")),C.type){case"self-declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(R=new Error("Aborted because of self decline: "+C.moduleId+L));break;case"declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(R=new Error("Aborted because of declined dependency: "+C.moduleId+" in "+C.parentId+L));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(C),t.ignoreUnaccepted||(R=new Error("Aborted because "+d+" is not accepted"+L));break;case"accepted":t.onAccepted&&t.onAccepted(C),M=!0;break;case"disposed":t.onDisposed&&t.onDisposed(C),j=!0;break;default:throw new Error("Unexception type "+C.type)}if(R)return f("abort"),Promise.reject(R);if(M)for(d in b[d]=h[d],p(y,C.outdatedModules),C.outdatedDependencies)Object.prototype.hasOwnProperty.call(C.outdatedDependencies,d)&&(v[d]||(v[d]=[]),p(v[d],C.outdatedDependencies[d]));j&&(p(y,[C.moduleId]),b[d]=g)}var T,I=[];for(o=0;o<y.length;o++)d=y[o],E[d]&&E[d].hot._selfAccepted&&I.push({module:d,errorHandler:E[d].hot._selfAccepted});f("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var A,U,_=y.slice();_.length>0;)if(d=_.pop(),c=E[d]){var k={},S=c.hot._disposeHandlers;for(i=0;i<S.length;i++)(n=S[i])(k);for(a[d]=k,c.hot.active=!1,delete E[d],delete v[d],i=0;i<c.children.length;i++){var N=E[c.children[i]];N&&((T=N.parents.indexOf(d))>=0&&N.parents.splice(T,1))}}for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(c=E[d]))for(U=v[d],i=0;i<U.length;i++)A=U[i],(T=c.children.indexOf(A))>=0&&c.children.splice(T,1);for(d in f("apply"),r=m,b)Object.prototype.hasOwnProperty.call(b,d)&&(e[d]=b[d]);var H=null;for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(c=E[d])){U=v[d];var P=[];for(o=0;o<U.length;o++)if(A=U[o],n=c.hot._acceptedDependencies[A]){if(-1!==P.indexOf(n))continue;P.push(n)}for(o=0;o<P.length;o++){n=P[o];try{n(U)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:U[o],error:e}),t.ignoreErrored||H||(H=e)}}}for(o=0;o<I.length;o++){var B=I[o];d=B.module,s=[d];try{D(d)}catch(e){if("function"==typeof B.errorHandler)try{B.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||H||(H=n),H||(H=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||H||(H=e)}}return H?(f("fail"),Promise.reject(H)):(f("idle"),new Promise(function(e){e(y)}))}var E={};function D(t){if(E[t])return E[t].exports;var o=E[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:O,apply:M,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(c=s,s=[],c),children:[]};return e[t].call(o.exports,o,o.exports,d(t)),o.l=!0,o.exports}D.m=e,D.c=E,D.d=function(e,t,n){D.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,t){if(1&t&&(e=D(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(D.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)D.d(n,o,function(t){return e[t]}.bind(null,o));return n},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="/",D.h=function(){return r},d(4)(D.s=4)}([function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"table.grid-2d {\n  border-collapse: collapse;\n  border: 2px solid #444;\n  margin-bottom: 0; }\n  table.grid-2d td {\n    padding: 0;\n    border: 1px solid #aaa;\n    height: 24px;\n    width: 24px; }\n\nform.controlForm {\n  margin-top: 12px; }\n  form.controlForm button {\n    margin-right: 6px; }\n  form.controlForm :last-child {\n    margin-right: 0; }\n",""])},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,".main-holder {\n  display: flex; }\n",""])},function(e,t,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,d=0,l=[],u=n(6);function f(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(b(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=l[l.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=d++;n=c||(c=v(t)),o=x.bind(null,n,a,!1),r=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=u(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),o=function(e,t){var n=t.css,o=t.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){m(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return f(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}e&&f(p(e,t),t);for(r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var g,w=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function x(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(i).concat([r]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";n.r(t);class o{constructor({name:e,color:t}={}){this.name=e,this.color=t||"red",this.rotations=[[[1,3,1],[1,0,0]],[[1,3],[0,1],[0,1]],[[0,2,1],[1,1,1]],[[3,0],[1,0],[1,1]]],this.rotationIndex=0}get rotation(){return this.rotations[this.rotationIndex]}rotateLeft(){this.rotationIndex--,this.rotationIndex<0&&(this.rotationIndex=3)}rotateRight(){this.rotationIndex++,this.rotationIndex>3&&(this.rotationIndex=0)}}class r extends o{constructor({name:e,color:t}={}){super({name:"I",color:"red"}),this.rotations=[[[3],[1],[1],[1]],[[1,3,1,1]],[[3],[1],[1],[1]],[[1,1,3,1]]]}}class i extends o{constructor({name:e,color:t}={}){super({name:"J",color:"magenta"}),this.rotations=[[[1,3,1],[0,0,1]],[[0,3],[0,1],[1,1]],[[1,2,0],[1,1,1]],[[3,1],[1,0],[1,0]]]}}class a extends o{constructor({name:e,color:t}={}){super({name:"L",color:"yellow"}),this.rotations=[[[1,3,1],[1,0,0]],[[1,3],[0,1],[0,1]],[[0,2,1],[1,1,1]],[[3,0],[1,0],[1,1]]]}}class s extends o{constructor({name:e,color:t}={}){super({name:"O",color:"cyan"}),this.rotations=[[[3,1],[1,1]],[[1,3],[1,1]],[[3,1],[1,1]],[[1,3],[1,1]]]}}class c extends o{constructor({name:e,color:t}={}){super({name:"S",color:"blue"}),this.rotations=[[[0,3,1],[1,1,0]],[[3,0],[1,1],[0,1]],[[0,3,1],[1,1,0]],[[3,0],[1,1],[0,1]]]}}class d extends o{constructor({name:e,color:t}={}){super({name:"T",color:"silver"}),this.rotations=[[[1,3,1],[0,1,0]],[[0,3],[1,1],[0,1]],[[0,3,0],[1,1,1]],[[3,0],[1,1],[1,0]]]}}class l extends o{constructor({name:e,color:t}={}){super({name:"Z",color:"green"}),this.rotations=[[[1,3,0],[0,1,1]],[[0,3],[1,1],[1,0]],[[1,3,0],[0,1,1]],[[0,3],[1,1],[1,0]]]}}const u="left",f="right",p="bottom";class h{constructor({numOfCol:e=10,numOfRow:t=20,defaultTetroX:n,defaultTetroY:o,uiComponent:r}={}){this.numOfCol=e,this.numOfRow=t,this.defaultTetroX=n||0,this.defaultTetroY=o||0,this.tetro=void 0,this.tetroX,this.tetroY,this.uiComponent=r;const i=[];for(let n=0;n<t;n++)i.push(new Array(e).fill(""));this.matrix=i,this.uiComponent&&"function"==typeof this.uiComponent.setMatrix&&this.uiComponent.setMatrix(this.matrix)}getTetroPositions(){const{tetro:e,tetroX:t,tetroY:n}=this;if(e){return this.tetro.rotation.reduce((o,r,i)=>{for(let a=0;a<r.length;a++){const s=r[a];1!==s&&3!==s||o.push({x:t+a,y:n+i,color:e.color})}return o},[])}}updateMatrix({reset:e=!1}={}){const{numOfCol:t,numOfRow:n}=this,o=this.getTetroPositions();if(o){if(o.some(e=>{const{x:o,y:r}=e;return o<0||o>t-1||r<0||r>n-1}))return!1;if(e){if(o.every(e=>""!==this.matrix[e.y][e.x]))return o.forEach(e=>this.matrix[e.y][e.x]=""),!0}else{if(o.every(e=>""===this.matrix[e.y][e.x]))return o.forEach(e=>this.matrix[e.y][e.x]=e.color),!0}}return!1}addTetro({tetro:e,x:t,y:n}){this.tetroX=t||this.defaultTetroX,this.tetroY=n||this.defaultTetroY,this.tetro=e,this.updateMatrix(),this.updateUiComponent()}moveTetro({direction:e}={}){if(this.updateMatrix({reset:!0})){if(e===u?this.tetroX--:e===f?this.tetroX++:e===p&&this.tetroY++,this.updateMatrix())return this.updateUiComponent(),!0;e===u?this.tetroX++:e===f?this.tetroX--:e===p&&this.tetroY--,this.updateMatrix()}return!1}moveLeft(){return this.moveTetro({direction:u})}moveRight(){return this.moveTetro({direction:f})}moveDown(){return this.moveTetro({direction:p})}drop(){for(;this.moveDown(););}rotateTetro({direction:e}={}){if(this.updateMatrix({reset:!0})){if(e===u?this.tetro.rotateLeft():e===f&&this.tetro.rotateRight(),this.updateMatrix())return this.updateUiComponent(),!0;e===u?this.tetro.rotateRight():e===f&&this.tetro.rotateLeft(),this.updateMatrix()}return!1}rotateLeft(){return this.rotateTetro({direction:u})}rotateRight(){return this.rotateTetro({direction:f})}updateUiComponent(){this.uiComponent&&"function"==typeof this.uiComponent.update&&this.uiComponent.update()}}class m{constructor({numOfCol:e=10,numOfRow:t=20,parentNode:n,grid:o,matrix:r}={}){this.numOfCol=e,this.numOfRow=t,this.parentNode=n,this.table=document.createElement("table"),this.table.className="grid-2d",this.matrix=r,this.init(),this.appendToRoot()}appendToRoot(){const{parentNode:e,table:t}=this;e&&"function"==typeof e.appendChild&&t.parentNode!==e&&e.appendChild(t)}init(){const{numOfCol:e,numOfRow:t,table:n}=this,o=document.createElement("tbody");for(let n=0;n<t;n++){const t=document.createElement("tr");for(let n=0;n<e;n++){const e=document.createElement("td");t.appendChild(e)}o.appendChild(t)}n.appendChild(o)}setMatrix(e){this.matrix=e}update(){const e=this.matrix;for(let t=0;t<e.length;t++)for(let n=0;n<e[t].length;n++){const o=e[t][n]||"transparent";this.table.rows[t].cells[n].style.backgroundColor=o}}}class v{constructor({onMoveLeft:e,onMoveRight:t,onMoveDown:n,onRotateLeft:o,onRotateRight:r,onAdd:i,onDrop:a,parentNode:s}={}){this.onAdd=i,this.onDrop=a,this.onMoveLeft=e,this.onMoveRight=t,this.onMoveDown=n,this.onRotateLeft=o,this.onRotateRight=r,this.parentNode=s,this.render()}createButton({label:e,name:t,onClick:n}){const o=document.createElement("button");return o.setAttribute("name",t),o.setAttribute("type","button"),o.innerText=e,"function"==typeof n&&o.addEventListener("click",n),o}render(){const e=document.createElement("form");e.name="controlForm",e.className="controlForm";const t=this.createButton({label:"Rotate Left",name:"rotateLeft",onClick:this.onRotateLeft}),n=this.createButton({label:"Rotate Right",name:"rotateRight",onClick:this.onRotateRight}),o=this.createButton({label:"Move Left",name:"moveLeft",onClick:this.onMoveLeft}),r=this.createButton({label:"Move Right",name:"moveRight",onClick:this.onMoveRight}),i=this.createButton({label:"Move Down",name:"moveDown",onClick:this.onMoveDown}),a=this.createButton({label:"Add New Tetro",name:"addNew",onClick:this.onAdd}),s=this.createButton({label:"Drop Tetro",name:"dropTetro",onClick:this.onDrop}),c=document.createElement("div");c.appendChild(a),c.appendChild(s);const d=document.createElement("div");d.appendChild(t),d.appendChild(n);const l=document.createElement("div");l.appendChild(o),l.appendChild(i),l.appendChild(r),e.appendChild(c),e.appendChild(d),e.appendChild(l),this.parentNode.appendChild(e)}}n(7),n(5);window.addEventListener("DOMContentLoaded",function(){const e=document.getElementById("root"),t=[new r,new i,new a,new s,new c,new d,new l],n=new m({numOfCol:10,numOfRow:20,parentNode:e}),o=new h({numOfCol:10,numOfRow:20,uiComponent:n});function u(){const e=t.length,n=Math.floor(Math.random()*e);o.addTetro({tetro:t[n],x:3,y:0})}new v({onAdd:function(){u()},onDrop:function(){o.drop(),u()},onMoveLeft:function(){o.moveLeft()},onMoveRight:function(){o.moveRight()},onMoveDown:function(){o.moveDown()},onRotateLeft:function(){o.rotateLeft()},onRotateRight:function(){o.rotateRight()},parentNode:e}),u()})},function(e,t,n){var o=n(0);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0},i=n(2)(o,r);o.locals&&(e.exports=o.locals),e.hot.accept(0,function(t){!function(){var t=n(0);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,o=0;for(n in e){if(!t||e[n]!==t[n])return!1;o++}for(n in t)o--;return 0===o}(o.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,t,n){var o=n(1);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0},i=n(2)(o,r);o.locals&&(e.exports=o.locals),e.hot.accept(1,function(t){!function(){var t=n(1);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,o=0;for(n in e){if(!t||e[n]!==t[n])return!1;o++}for(n in t)o--;return 0===o}(o.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,